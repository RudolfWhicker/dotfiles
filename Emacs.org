#+TITLE: Emacs Config
#+AUTHOR: Rudolf Whicker
#+PROPERTY: header-args :tangle "~/.config/emacs-flavors/emacs/init.el"
#+auto_tangle: t

* TO DO
- [X] Auto tangle files
- [X] Vertico and Marginalia
- [X] eglot
- [X] savehist
  
* Basic
** Early Init
#+begin_src emacs-lisp :tangle "~/.config/emacs-flavors/emacs/early-init.el"
  (setq site-run-file nil                         ; No site-wide run-time initializations. 
        inhibit-default-init t                    ; No site-wide default library
        gc-cons-threshold most-positive-fixnum    ; Very large threshold for garbage
                                          ; collector during init
        package-enable-at-startup nil)            ; We'll use straight.el

  (setq native-comp-eln-load-path
        (list (expand-file-name "eln-cache" user-emacs-directory)))

  ;; Reset garbage collector limit after init process has ended (8Mo)
  (add-hook 'after-init-hook
            #'(lambda () (setq gc-cons-threshold (* 8 1024 1024))))

#+end_src

** Autosave and Backups
This makes it so that all backup and autosave are in '/tmp'.
#+begin_src emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+end_src

** Package Management
I use [[https://github.com/radian-software/straight.el][straight.el]]. Disable checking for speed.
#+begin_src emacs-lisp
  (setq straight-check-for-modifications nil)
#+end_src

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

** Package Installation
#+begin_src emacs-lisp
  (setq package-list
        '(all-the-icons          ; Big list of icons
          cape                   ; Completion At Point Extensions
          orderless              ; Completion style for matching regexps in any order
          vertico                ; VERTical Interactive COmpletion
          marginalia             ; Enrich existing commands with completion annotations
          corfu                  ; Text completion package
          kind-icon
          consult                ; Consulting completing-read
          smartparens            ; Handling delimeters
          org
          org-superstar          ; Better bullets in org
          chocolate-theme        ; A nice theme
          f                      ; Modern API for working with files and directories
          flyspell-correct-popup ; Correcting words with flyspell via popup interface
          flyspell-popup         ; Correcting words with Flyspell in popup menus
          guess-language         ; Robust automatic language detection
          helpful                ; A better help buffer
          htmlize                ; Convert buffer text and decorations to HTML
          mini-frame             ; Show minibuffer in child frame on read-from-minibuffer
          hide-mode-line         ; A minor mode that hides (or masks) the mode-line in your current buffer.
          doom-modeline          ; The modeline from DOOM Emacs
          imenu-list             ; Show imenu entries in a separate buffer
          magit                  ; A Git porcelain inside Emacs.
          markdown-mode          ; Major mode for Markdown-formatted text
          multi-term             ; Managing multiple terminal buffers in Emacs.
          yaml-mode              ; YAML mode
          haskell-mode           ; Haskell mode
          rust-mode              ; Rust mode
          consult-recoll         ; Consult interface for recoll query
          org-auto-tangle        ; Tangle org file when it is saved
          mastodon               ; Emacs client for mastadon
          emojify                ; Emojis in emacs
          exec-path-from-shell   ; Get environment variables such as $PATH from the shell 
          which-key))            ; Display available keybindings in popup
  ;; Install packages that are not yet installed
  (dolist (package package-list)
    (straight-use-package package))
#+end_src

* UI
Let's get these out of the way.
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+end_src

** Themes
#+begin_src emacs-lisp
  (load-theme 'chocolate t)
#+end_src

** Fonts
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :family "Cartograph CF"
                      :height 95)
  (set-face-attribute 'variable-pitch nil
                      :family "Cartograph CF"
                      :height 100)
#+end_src

** Modeline
#+begin_src emacs-lisp
  (require 'doom-modeline)
  (doom-modeline-mode 1)
#+end_src

** Vertico
#+begin_src emacs-lisp
  (require 'vertico)
  (vertico-mode)
#+end_src

** Marginalia
#+begin_src emacs-lisp
  (require 'marginalia)
  (marginalia-mode)
#+end_src

* Multi-term
Making terminal open in horizontal split.
#+begin_src emacs-lisp
  (require 'multi-term)
  (require 'hide-mode-line)
  (defun multi-term-bottom ()
    "Create a new vterm window to the right of the current one."
    (interactive)
    (let* ((ignore-window-parameters t)
           (dedicated-p (window-dedicated-p)))
      (split-window-vertically)
      (other-window 1)
      (multi-term)
      (hide-mode-line-mode)))
#+end_src

* Eglot
#+begin_src emacs-lisp
  (require 'eglot)
#+end_src
** Haskell
#+begin_src emacs-lisp
  (require 'haskell-mode)
  (add-to-list 'eglot-server-programs 
               '(haskell-mode . ("haskell-language-server-wrapper" "--lsp")))
  (add-hook 'haskell-mode-hook 'eglot-ensure)
#+end_src

** Rust
#+begin_src emacs-lisp
  (require 'rust-mode)
  (add-hook 'rust-mode-hook 'eglot-ensure)
#+end_src

* Auto Complete
** Corfu
[[https://github.com/minad/corfu][Corfu]] for completion at point.
#+begin_src emacs-lisp
  (require 'corfu)

  (setq corfu-cycle t                ; Enable cycling for `corfu-next/previous'
        corfu-auto t                 ; Enable auto completion
        corfu-auto-delay 1.0         ; Delay before auto-completion shows up
        corfu-auto-prefix 1          ; Minimum characters before auto-completing
        corfu-separator ?\s          ; Orderless field separator
        corfu-quit-at-boundary nil   ; Never quit at completion boundary
        corfu-quit-no-match t        ; Quit when no match
        corfu-preview-current nil    ; Disable current candidate preview
        corfu-preselect-first nil    ; Disable candidate preselection
        corfu-on-exact-match nil     ; Configure handling of exact matches
        corfu-echo-documentation nil ; Disable documentation in the echo area
        corfu-scroll-margin 5)       ; Use scroll margin
  
  (add-hook 'prog-mode-hook 'corfu-mode)
#+end_src
Some more useful configurations
#+begin_src emacs-lisp
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  (setq read-extended-command-predicate
        #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; completion-at-point is often bound to M-TAB.
  (setq tab-always-indent 'complete)

  ;; Completion in source blocks
  (require 'cape)

  (add-to-list 'completion-at-point-functions 'cape-symbol)
#+end_src
Kind icons for cool looks.
#+begin_src emacs-lisp
  (require 'kind-icon)

  (setq kind-icon-use-icons t
	kind-icon-default-face 'corfu-default ; Have background color be the same as `corfu' face background
	kind-icon-blend-background nil  ; Use midpoint color between foreground and background colors ("blended")?
	kind-icon-blend-frac 0.08)

  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)
  (add-hook 'kb/themes-hooks #'(lambda () (interactive) (kind-icon-reset-cache)))
#+end_src

** Orderless
Allow completion based on space-separated tokens, out of order.
#+begin_src emacs-lisp  
  (require 'orderless)
  
  (setq completion-styles '(substring orderless basic)
        orderless-component-separator 'orderless-escapable-split-on-space
        read-file-name-completion-ignore-case t
        read-buffer-completion-ignore-case t
        completion-ignore-case t)
#+end_src

** Savehist
#+begin_src emacs-lisp
  (savehist-mode)
#+end_src

** SmartParens
#+begin_src emacs-lisp
  (require 'smartparens-config)

  (smartparens-global-mode)
#+end_src

* Org
** General
I want these to run when org loads.
#+begin_src emacs-lisp
  (setq-default fill-column 80)
  (defun my/org-startup ()
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (org-indent-mode))
  (add-hook 'org-mode-hook #'my/org-startup)
#+end_src

** Inserting org code blocks
This enables us to insert org code blocks in an easier way. For e.g., <el and then hitting the TAB key inserts an emacs lisp code block.
#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("li" . "src lisp"))
  (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("go" . "src go"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("json" . "src json"))
#+end_src

** Org Auto Tangle
#+begin_src emacs-lisp
  (require 'org-auto-tangle)
  (add-hook 'org-mode-hook 'org-auto-tangle-mode)
#+end_src

** Org Fonts
#+begin_src emacs-lisp
  (set-face-attribute 'org-level-1 nil :font "Insaniburger" :weight 'medium :height 140)
  (set-face-attribute 'org-level-2 nil :font "Cartograph CF" :weight 'medium :height 135)
  (set-face-attribute 'org-level-3 nil :font "Cartograph CF" :weight 'medium :height 130)
  (set-face-attribute 'org-level-4 nil :font "Cartograph CF" :weight 'medium :height 125)
  (set-face-attribute 'org-level-5 nil :font "Cartograph CF" :weight 'medium :height 120)
  (set-face-attribute 'org-level-6 nil :font "Cartograph CF" :weight 'medium :height 115)
  (set-face-attribute 'org-level-7 nil :font "Cartograph CF" :weight 'medium :height 110)
  (set-face-attribute 'org-level-8 nil :font "Cartograph CF" :weight 'medium :height 105)
#+end_src

** Org Superstar
#+begin_src emacs-lisp
  (require 'org-superstar)
  (setq org-superstar-remove-leading-stars t
        org-superstar-headline-bullets-list '("#" "○" "●" "✽" "➤" "➤" "➤"))
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
#+end_src

* Mastodon
An Emacs client for Mastodon.
#+begin_src emacs-lisp
  (require 'mastodon)

  (setq mastodon-instance-url "https://mastodon.social"
        mastodon-active-user  (getenv "MASTODON_USERNAME"))
#+end_src
