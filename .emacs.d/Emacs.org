#+TITLE: Whicked Emacs
#+AUTHOR: Rudolf Whicker
#+PROPERTY: header-args:emacs-lisp :tangle "~/.emacs.flavours.d/default/init.el"

* Todo
- [X] lsp bridge
- [ ] oxocarbon
- [X] vertico & marganalia
- [X] rust-mode, typescript-mode
- [X] magit
  
  
* Core
** Header
#+BEGIN_SRC emacs-lisp
  ;; -*- lexical-binding: t -*-
  ;; This file has been generated from dotemacs.org file. DO NOT EDIT.
  ;; Sources are available from https://github.com/rougier/dotemacs

  ;; Copyright (C) 2022 Nicolas P. Rougier

  ;; This file is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation; either version 3, or (at your option)
  ;; any later version.

  ;; This file is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; For a full copy of the GNU General Public License
  ;; see <https://www.gnu.org/licenses/>.
#+END_SRC

** Early Init
#+BEGIN_SRC emacs-lisp :tangle "~/.emacs.flavours.d/default/early-init.el"
  (setq
   site-run-file nil                         ; No site-wide run-time initializations. 
   inhibit-default-init t                    ; No site-wide default library
   gc-cons-threshold most-positive-fixnum    ; Very large threshold for garbage
                                             ; collector during init
   package-enable-at-startup nil)            ; We'll use straight.el

  (setq native-comp-eln-load-path
        (list (expand-file-name "eln-cache" user-emacs-directory)))
  (setq package-enable-at-startup nil)
  ;; Reset garbage collector limit after init process has ended (8Mo)
  (add-hook 'after-init-hook
            #'(lambda () (setq gc-cons-threshold (* 8 1024 1024))))

  (defun ar/show-welcome-buffer ()
    "Show *Welcome* buffer."
    (with-current-buffer (get-buffer-create "*Welcome*")
      (setq truncate-lines t)
      (let* ((buffer-read-only)
             (image-path "~/.emacs.d/emacs.png")
             (image (create-image image-path))
             (size (image-size image))
             (height (cdr size))
             (width (car size))
             (top-margin (floor (/ (- (window-height) height) 2)))
             (left-margin (floor (/ (- (window-width) width) 2)))
             (prompt-title "Welcome to Emacs!"))
        (erase-buffer)
        (setq mode-line-format nil)
        (goto-char (point-min))
        (insert (make-string top-margin ?\n ))
        (insert (make-string left-margin ?\ ))
        (insert-image image)
        (insert "\n\n\n")
        (insert (make-string (floor (/ (- (window-width) (string-width prompt-title)) 2)) ?\ ))
        (insert prompt-title))
      (setq cursor-type nil)
      (read-only-mode +1)
      (switch-to-buffer (current-buffer))
      (local-set-key (kbd "q") 'kill-this-buffer)))

  (setq initial-scratch-message nil)
  (setq inhibit-startup-screen t)

  (when (< (length command-line-args) 2)
    (add-hook 'emacs-startup-hook (lambda ()
                                    (when (display-graphic-p)
                                      (ar/show-welcome-buffer)))))
#+END_SRC

** Package Management
straight.el
#+BEGIN_SRC emacs-lisp
  (setq straight-check-for-modifications nil)

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC
use-package
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+END_SRC

** Backup and Autosave
To prevent org from littering my project folders
#+begin_src emacs-lisp
  ;; don't want autosave to be all over the place
  (setq auto-save-list-file-prefix ; Prefix for generating auto-save-list-file-name
        (expand-file-name ".auto-save-list/.saves-" user-emacs-directory)
        auto-save-default t        ; Auto-save every buffer that visits a file
        auto-save-timeout 20       ; Number of seconds between auto-save
        auto-save-interval 200)    ; Number of keystrokes between auto-saves
  ;; same for backup files
  (setq backup-directory-alist       ; File name patterns and backup directory names.
        `(("." . ,(expand-file-name "backups" user-emacs-directory)))
        make-backup-files t          ; Backup of a file the first time it is saved.
        vc-make-backup-files t       ; No backup of files under version contr
        backup-by-copying t          ; Don't clobber symlinks
        version-control t            ; Version numbers for backup files
        delete-old-versions t        ; Delete excess backup files silently
        kept-old-versions 6          ; Number of old versions to keep
        kept-new-versions 9          ; Number of new versions to keep
        delete-by-moving-to-trash t) ; Delete files to trash
#+end_src

** Savehist
#+begin_src emacs-lisp
  (use-package savehist
    :init (savehist-mode))
#+END_SRC


* Developement
** Magit
#+begin_src emacs-lisp
  (use-package magit)
#+end_src

** Vterm
#+begin_src emacs-lisp
  (use-package vterm)
#+end_src

** Flutter
#+begin_src emacs-lisp
  (use-package dart-mode
      ;; Optional
    :hook (dart-mode . flutter-test-mode))

  (use-package flutter
    :after dart-mode
    :bind (:map dart-mode-map
                ("C-M-x" . #'flutter-run-or-hot-reload))
    :config
    (setenv "JAVA_HOME" "~/.local/bin/android-studio/jbr"))
#+end_src


* Appearance
** Frame
#+begin_src emacs-lisp
  (require 'frame)

  ;; Default frame settings
  (setq default-frame-alist '((min-height . 1)  '(height . 45)
                              (min-width  . 1)  '(width  . 81)
                              (vertical-scroll-bars . nil)
                              (internal-border-width . 24)
                              (left-fringe . 0)
                              (right-fringe . 0)
                              (tool-bar-lines . 0)
                              (menu-bar-lines . 0)))

  ;; Default frame settings
  (setq initial-frame-alist default-frame-alist)
#+end_src

** UI
#+begin_src emacs-lisp
  (tooltip-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)

  ;; All the icons
  (use-package all-the-icons)

  ;; Line numbers
  (display-line-numbers-mode)

  ;; Highlight current line
  (global-hl-line-mode)

  (use-package visual-fill-column
    :init
    (setq visual-fill-column-width 110
          visual-fill-column-center-text t))
#+end_src

** Keyboard
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode))
#+end_src

** Cursor
#+begin_src emacs-lisp
  (setq-default cursor-in-non-selected-windows nil ; Hide the cursor in inactive windows
                cursor-type '(hbar . 2)            ; Underline-shaped cursor
                cursor-intangible-mode t           ; Enforce cursor intangibility
                x-stretch-cursor nil)              ; Don't stretch cursor to the glyph width

  (blink-cursor-mode 0)                            ; Still cursor
#+end_src

** Text
#+begin_src emacs-lisp
  (delete-selection-mode 1)
#+end_src

** Sound
Disable the bell
#+begin_src emacs-lisp
  (setq-default visible-bell nil             ; No visual bell      
                ring-bell-function 'ignore)  ; No bell
#+end_src

** Scroll
Smoother scrolling.
#+begin_src emacs-lisp
  (setq-default scroll-conservatively 101       ; Avoid recentering when scrolling far
                scroll-margin 2                 ; Add a margin when scrolling vertically
                recenter-positions '(5 bottom)) ; Set re-centering positions
#+end_src

#+begin_src emacs-lisp
  (pixel-scroll-precision-mode)
#+end_src

** Modeline
#+begin_src emacs-lisp
  (use-package fontset
    :straight (:type built-in) ;; only include this if you use straight
    :config
    ;; Use symbola for proper unicode
    (when (member "Symbola" (font-family-list))
      (set-fontset-font
       t 'symbol "Symbola" nil)))
  (use-package bespoke-modeline
    :straight (:type git :host github :repo "mclear-tools/bespoke-modeline") 
    :init
    ;; Set header line
    (setq bespoke-modeline-position 'top)
    ;; Set mode-line height
    (setq bespoke-modeline-size 2)
    ;; Show diff lines in mode-line
    (setq bespoke-modeline-git-diff-mode-line t)
    ;; Set mode-line cleaner
    (setq bespoke-modeline-cleaner t)
    ;; Use mode-line visual bell
    (setq bespoke-modeline-visual-bell nil)
    ;; Set vc symbol
    (setq  bespoke-modeline-vc-symbol "G:")
    :config
    (bespoke-modeline-mode))
#+end_src

** Theme
#+begin_src emacs-lisp
  ;; (use-package doom-themes
  ;;   :config
  ;;   (add-to-list 'custom-theme-load-path "~/.emacs.flavours.d/default/themes/")
  ;;   (load-theme 'ibm-carbon-gray-100 t)
  ;;   (setq doom-themes-enable-bold t
  ;;         doom-themes-enable-italic t)
  ;;   (doom-themes-visual-bell-config)
  ;;   :custom
  ;;   (ibm-carbon-gray-100-warm t)
  ;;   (ibm-carbon-gray-100-line-number-colored t))

  (use-package catppuccin-theme
    :custom
    (catppuccin-flavor 'mocha)
    :init
    (load-theme 'catppuccin t))
#+end_src

** Fonts
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
  		    :font "JetBrains Mono"
  		    :weight 'light
  		    :height 110)
  (set-face-attribute 'variable-pitch nil
  		    :font "Roboto Mono"
  		    :height 105
  		    :weight 'regular)
  (set-face-attribute 'fixed-pitch nil
  		    :font "Roboto Mono"
  		    :height 105
  		    :weight 'regular)
#+end_src

** Delimeters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package smartparens
    :hook (prog-mode . smartparens-mode))
#+end_src

** Indent bars
#+begin_src emacs-lisp
  (use-package indent-bars
    :straight (indent-bars :type git :host github :repo "jdtsmith/indent-bars")
    :hook ((prog-mode) . indent-bars-mode))
#+end_src

** Minibuffer
*** Consult
#+begin_src emacs-lisp
  (use-package consult
    :bind ())
#+end_src

*** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :custom
    (vertico-resize nil)
    (vertico-count 8)
    (vertico-count-format nil)
    (vertico-grid-separator
     #("  |  " 2 3 (display (space :width (1))
                            face (:background "#ECEFF1"))))
    (vertico-group-format
     (concat #(" " 0 1 (face vertico-group-title))
             #(" " 0 1 (face vertico-group-separator))
             #(" %s " 0 4 (face vertico-group-title))
             #(" " 0 1 (face vertico-group-separator
                             display (space :align-to (- right (-1 . right-margin) (- +1)))))))
    :init
    (vertico-mode))
#+end_src

*** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :custom
    (marginalia--ellipsis "…")
    (marginalia-align 'right)
    (marginalia-align-offset -1)
    :init
    (marginalia-mode))
#+end_src


* Completeion
** COMMENT Corfu
#+begin_src emacs-lisp
  (use-package corfu			;
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-separator ?/)          ;; Orderless field separator
    (corfu-quit-no-match nil)      ;; Never quit, even if there is no match

    :bind (:map corfu-map
                ("TAB" . corfu-next)
                ([tab] . corfu-next)
                ("S-TAB" . corfu-previous)
                ([backtab] . corfu-previous))
    
    :init
    (global-corfu-mode))

  (add-to-list 'load-path "~/.emacs.flavours.d/default/lisp")
  (require 'corfu-popupinfo)
  (corfu-popupinfo-mode)
#+end_src

** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :init
    (yas-global-mode 1))
#+end_src

** LSP Bridge
#+begin_src emacs-lisp
  (use-package lsp-bridge
    :straight '(lsp-bridge :type git :host github :repo "manateelazycat/lsp-bridge"
              :files (:defaults "*.el" "*.py" "acm" "core" "langserver" "multiserver" "resources")
              :build (:not compile))
    :init
    (global-lsp-bridge-mode))
#+end_src

** Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src


* Languages
** Julia
#+begin_src emacs-lisp
  (use-package julia-mode
    :ensure t)

  (use-package julia-repl
    :ensure t
    :hook (julia-mode . julia-repl-mode)

    :init
    (setenv "JULIA_NUM_THREADS" "8")

    :config
    ;; Set the terminal backend
    (julia-repl-set-terminal-backend 'vterm))
#+end_src

** Rust
#+begin_src emacs-lisp
  (use-package rust-mode)
#+end_src

** Typescript
#+begin_src emacs-lisp
  (use-package typescript-mode)
#+end_src

** JS2
#+begin_src emacs-lisp
  (use-package js2-mode
    :hook ((js-mode-hook . js2-minor-mode)))
#+end_src

** Skewer
#+begin_src emacs-lisp
  (use-package skewer-mode
    :hook ((js2-mode-hook . skewer-mode)
  	 (css-mode-hook . skewer-css-mode)
  	 (html-mode-hook . skewer-html-mode)))
#+end_src

** Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode)
#+end_src


* Key Binding
** Ace Window
#+begin_src emacs-lisp
  (use-package ace-window
    :bind (
  	 ("M-o" . ace-window))
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (ace-window-display-mode))
#+end_src

** Evil Mode
#+begin_src emacs-lisp
  (use-package evil
    :init
    (evil-mode))
  (use-package undo-tree)
#+end_src


* Org
** Org Mode
#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 80)

  (defun rw/my-org-startup ()
    (org-indent-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (visual-fill-column-mode)
    (setq evil-auto-indent nil)
    (diminish org-indent-mode))
  (use-package org
    :hook (org-mode . rw/my-org-startup))
#+END_SRC

** Org Tempo
#+BEGIN_SRC emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("li" . "src lisp"))
  (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("go" . "src go"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("jv" . "src java"))
#+END_SRC

** Org Modern
#+begin_src emacs-lisp
  (use-package org-modern
    :hook (org-mode . org-modern-mode))
#+end_src

** Org Fonts
#+begin_src emacs-lisp
  (require 'org-faces)
  (set-face-attribute 'org-document-title nil :font "Roboto Mono" :weight 'bold :height 1.3)
    
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Roboto Mono" :weight 'medium :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'normal)
  (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

  ;; Get rid of the background on column views
  (set-face-attribute 'org-column nil :background nil)
  (set-face-attribute 'org-column-title nil :background nil)
#+end_src

** Writeroom mode
#+begin_src emacs-lisp
  (use-package solarized-theme)
  (use-package writeroom-mode)
#+end_src

** Fountain mode
#+begin_src emacs-lisp
  (use-package fountain-mode)
#+end_src
