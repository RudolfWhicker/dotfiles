#+TITLE: Whicker's Config
#+AUTHOR: Rudolf Whicker
#+PROPERTY: header-args:emacs-lisp :tangle ~/.config/emacs/init.el

* Early Init
#+begin_src emacs-lisp :tangle ~/.config/emacs/early-init.el
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (message "*** Emacs loaded in %s seconds with %d garbage collections."
		       (emacs-init-time "%.2f")
		       gcs-done)))
  ;; Silence compiler warnings as they can be pretty disruptive
  (setq native-comp-async-report-warnings-errors nil)

  ;; Set the right directory to store the native comp cache
  (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))

  ;; turn off package.el
  (setq package-enable-at-startup nil)
#+end_src


* Package Management
#+begin_src emacs-lisp  
  (unless (featurep 'straight)
    ;; Bootstrap straight.el
    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage)))

  ;; Use straight.el for use-package expressions
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+end_src


* Basic
** Autosave and Backup
#+begin_src emacs-lisp
  (setq backup-directory-alist
	`((".*" . "~/.local/share/emacs/backup")))
  (setq auto-save-file-name-transforms
	`((".*" "~/.local/share/emacs/autostart" t)))
#+end_src

** yes-or-no to y-or-n
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** History
#+begin_src emacs-lisp
  (use-package savehist
    :init
    (setq history-delete-duplicates t)
    :config
    (savehist-mode))
#+end_src

** Remembering recent edits
#+begin_src emacs-lisp
  (recentf-mode 1)
  (save-place-mode 1)
#+end_src

** Prevent UI dialogs
#+begin_src emacs-lisp
  (setq use-dialog-box nil)
#+end_src

** Auto Revert
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
  (setq global-auto-revert-non-file-buffers t)
#+end_src

** Paranthesis
#+begin_src emacs-lisp
  (use-package smartparens
    :hook ((prog-mode text-mode markdown-mode) . smartparens-mode))
#+end_src

Rainbow delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook ((prog-mode . rainbow-delimiters-mode)
  	 (org-mode . rainbow-delimiters-mode)))
#+end_src

** Garbage Collection
#+begin_src emacs-lisp
  (use-package gcmh
    :config
    (setq gcmh-idle-delay 5
  	gcmh-high-cons-threshold (* 16 1024 1024)) ;; 16mb
    (gcmh-mode 1))
#+end_src


* Org
#+begin_src emacs-lisp
  (use-package org
    :hook (org-mode . org-indent-mode)
    :config
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("li" . "src lisp"))
    (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
    (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("go" . "src go"))
    (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
    (add-to-list 'org-structure-template-alist '("json" . "src json")))
#+end_src
Centered text in org-mode
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :hook (org-mode . visual-fill-column-mode)
    :init
    (setq visual-fill-column-width 110
          visual-fill-column-center-text t))
#+end_src
More pretties
#+begin_src emacs-lisp
  (use-package org-superstar
    :hook (org-mode . org-superstar-mode))
#+end_src



** fountain-mode
#+begin_src emacs-lisp
  (use-package fountain-mode
    :hook (fountain-mode . variable-pitch-mode))
#+end_src


* UI
** Frame & Window
#+begin_src emacs-lisp
  (require 'frame)

  ;; Default frame settings
  (setq default-frame-alist '((min-height . 1)  '(height . 45)
  			      (min-width  . 1)  '(width  . 81)
  			      (vertical-scroll-bars . nil)
  			      (internal-border-width . 20)
  			      (left-fringe . 0)
  			      (right-fringe . 0)
  			      (tool-bar-lines . 0)
  			      (menu-bar-lines . 0)))
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src
No more resizing frame in steps
#+begin_src emacs-lisp
  (setq frame-resize-pixelwise t)
#+end_src
Resize windows in steps though
#+begin_src emacs-lisp
  (setq window-resize-pixelwise nil)
#+end_src

** Lines
Truncate lines
#+begin_src emacs-lisp
  (setq-default truncate-lines t)
#+end_src

** Font
Default fonts
#+begin_src emacs-lisp
    (set-face-attribute 'default nil
    		    :family "Hack"
    		    :weight 'regular
    		    :height 104)

    (set-face-attribute 'bold nil
                        :family "Hack"
                        :weight 'bold)

    (set-face-attribute 'italic nil
                        :family "Hack"
                        :weight 'medium
                        :slant 'italic)
#+end_src
Pitch fonts
#+begin_src emacs-lisp
    (set-face-attribute 'fixed-pitch nil
    		    :family "Courier Prime"
    		    :weight 'regular
    		    :height 112)

    (set-face-attribute 'variable-pitch nil
    		    :family "Courier Prime"
    		    :weight 'regular
    		    :height 112)
#+end_src

** Theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (load-theme 'doom-vibrant t))
 #+end_src

** Cursor
#+begin_src emacs-lisp
  (setq-default cursor-in-non-selected-windows nil ; Hide the cursor in inactive windows
                cursor-type '(hbar . 2)            ; Underline-shaped cursor
                cursor-intangible-mode t           ; Enforce cursor intangibility
                x-stretch-cursor nil)              ; Don't stretch cursor to the glyph width

  (blink-cursor-mode 0)                            ; Still cursor
#+end_src

** Minibuffer
*** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :init
    (setq vertico-resize nil        ; How to resize the Vertico minibuffer window.
  	vertico-count 8           ; Maximal number of candidates to show.
  	vertico-count-format nil) ; No prefix with number of entries
    :config
    (vertico-mode))
#+end_src
Prefix the current candidate with ⟶
#+begin_src emacs-lisp
  (defun minibuffer-format-candidate (orig cand prefix suffix index _start)
    (let ((prefix (if (= vertico--index index)
                      "⟶ "
                    "  "))) 
      (funcall orig cand prefix suffix index _start)))

  (advice-add #'vertico--format-candidate
             :around #'minibuffer-format-candidate)
#+end_src
*** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :config
    (marginalia-mode))
#+end_src

*** Counsel
#+begin_src emacs-lisp
  (use-package counsel
    :bind (("C-x C-f" . counsel-find-file)
  	 ("C-s" . swiper)))
#+end_src

** Modeline
I like to use the nano modeline.
#+begin_src emacs-lisp
  (use-package nano-modeline
    :straight (nano-modeline :type git :host github :repo "rougier/nano-modeline")
    :config
    (add-hook 'prog-mode-hook            #'nano-modeline-prog-mode)
    (add-hook 'text-mode-hook            #'nano-modeline-text-mode)
    (add-hook 'org-mode-hook             #'nano-modeline-org-mode)
    (add-hook 'pdf-view-mode-hook        #'nano-modeline-pdf-mode)
    (add-hook 'mu4e-headers-mode-hook    #'nano-modeline-mu4e-headers-mode)
    (add-hook 'mu4e-view-mode-hook       #'nano-modeline-mu4e-message-mode)
    (add-hook 'elfeed-show-mode-hook     #'nano-modeline-elfeed-entry-mode)
    (add-hook 'elfeed-search-mode-hook   #'nano-modeline-elfeed-search-mode)
    (add-hook 'term-mode-hook            #'nano-modeline-term-mode)
    (add-hook 'xwidget-webkit-mode-hook  #'nano-modeline-xwidget-mode)
    (add-hook 'messages-buffer-mode-hook #'nano-modeline-message-mode)
    (add-hook 'org-capture-mode-hook     #'nano-modeline-org-capture-mode)
    (add-hook 'org-agenda-mode-hook      #'nano-modeline-org-agenda-mode))
#+end_src
Gonna sweep the default modeline under the rug
#+begin_src emacs-lisp
  (setq-default mode-line-format (list ""))
  (set-face-attribute 'mode-line-active nil
                      :box nil
                      :inherit nil
                      :background (face-background 'vertical-border)
                      :height 0.1)
  (set-face-attribute 'mode-line-inactive nil
                      :box nil
                      :inherit nil
                      :background (face-background 'vertical-border)
                      :height 0.1)
#+end_src


* Developement
** vterm
#+begin_src emacs-lisp
  (use-package vterm)
#+end_src

** Snippets
yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet-snippets)
  (use-package yasnippet
    :config
    (yas-global-mode 1))
#+end_src

** LSP
I use lsp-mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    (setq lsp-headerline-breadcrumbs-enable nil))
#+end_src
Some pretties
#+begin_src emacs-lisp
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :init
    (setq lsp-ui-sideline-enable t
  	lsp-ui-sideline-show-hover t
  	lsp-ui-doc-position 'bottom)
    :config
    (lsp-ui-doc-show))
#+end_src

** Rust
#+begin_src emacs-lisp
  (use-package rust-mode
    :init
    (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode)))
#+end_src


* Git
** Magit
#+begin_src emacs-lisp
  (use-package magit)
#+end_src


* Keybinding
** evil
#+begin_src emacs-lisp
  (use-package undo-fu)

  (use-package evil
    :init
    (setq evil-undo-system 'undo-fu)
    :config
    (evil-set-initial-state 'dashboard-mode 'motion)
    (evil-set-initial-state 'debugger-mode 'motion)
    (evil-set-initial-state 'pdf-view-mode 'motion)

    ;; Keybindings
    (define-key evil-motion-state-map "/" 'swiper)

    ;; Cursor colors
    (setq evil-emacs-state-cursor '((face-background 'cursor) box))
    (setq evil-normal-state-cursor '((face-background 'cursor) box))
    (setq evil-operator-state-cursor '((face-background 'cursor) hollow))
    (setq evil-visual-state-cursor '((face-background 'cursor) box))
    (setq evil-insert-state-cursor '((face-background 'cursor) hbar))
    (setq evil-replace-state-cursor '((face-background 'cursor) hbar))
    (setq evil-motion-state-cursor '((face-background 'cursor) box))
    
    (evil-mode))
#+end_src

** general.el
#+begin_src emacs-lisp
  (use-package general)

  (general-def evil-normal-state-map
    :prefix "SPC"
    ;; LSP
    "l" '(nil :which-key "lsp")
    "ll" '(lsp :which-key "start lsp")

    ;; navigation
    "f" '(nil :which-key "navigation")
    "ff" '(counsel-find-file :which-key "find file")
    "fr" '(recentf-open :which-key "recent files")

    ;; project
    "s" '(nil :which-key "project")
    "ss" '(counsel-search :which-key "search project folder")
    "sm" '(magit :which-key "start magit")

    ;; writing
    "w" '(nil :which-key "writing")
    "wf" '(fountain-mode :which-key "fountain mode"))
#+end_src

** Esc to keyboard-escape-quit
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** TODO hydra
#+begin_src emacs-lisp
  
#+end_src

** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :init
    ;; Allow C-h to trigger which-key before it is done automatically
    (setq which-key-show-early-on-C-h t)
    :config
    (which-key-mode))
#+end_src


* Completion
** orderless
#+begin_src emacs-lisp
  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src
** corfu
#+begin_src emacs-lisp
  (use-package corfu
    :straight (corfu :type git :host github :repo "minad/corfu" :files (:defaults "extensions/*") :includes (corfu-popupinfo))
    :hook (corfu-mode . corfu-popupinfo-mode)
    :bind (:map corfu-map
  	      ("C-j" . corfu-next)
  	      ("C-k" . corfu-previous)
  	      ("TAB" . corfu-insert))
    :config
    (setq corfu-cycle t
  	corfu-auto t
  	corfu-separator ?\s
  	corfu-auto-delay 0.5
  	corfu-auto-prefix 1)
    :init
    (global-corfu-mode))
#+end_src


